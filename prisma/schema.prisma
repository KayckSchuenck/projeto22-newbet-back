generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  password        String
  cpf             String        @unique
  name            String  
  active          Boolean       @default(false)
  activationToken String        @unique
  availableMoney  Float         @default(20)
  createdAt       DateTime      @default(now())
  betOptions                    BetOptions[]
  betGoals                      BetGoals[]
  betScores                     BetScores[]
  betCorners                    BetCorners[]
  @@map("users")
}

model BetOptions { 
  id            Int          @id @default(autoincrement())
  userId        Int
  createdAt     DateTime     @default(now())
  finished      Boolean      @default(false)
  amount        Float       
  fixtureId     Int
  value         homeAwayDraw    
  odd           Float
  user          User?        @relation(fields: [userId], references: [id])

  @@map("betsOptions")
}

model BetGoals { 
  id            Int          @id @default(autoincrement())
  userId        Int
  createdAt     DateTime     @default(now())
  finished      Boolean      @default(false)
  amount        Float       
  fixtureId     Int
  type          overUnder
  value         Float          
  odd           Float
  user          User?        @relation(fields: [userId], references: [id])

  @@map("betsGoals")
}

model BetScores { 
  id            Int          @id @default(autoincrement())
  userId        Int
  createdAt     DateTime     @default(now())
  finished      Boolean      @default(false)
  amount        Float       
  fixtureId     Int
  scoreHome     Int
  scoreAway     Int
  odd           Float
  user          User?        @relation(fields: [userId], references: [id])

  @@map("betsScores")
}

model BetCorners { 
  id            Int          @id @default(autoincrement())
  userId        Int
  createdAt     DateTime     @default(now())
  finished      Boolean      @default(false)
  amount        Float       
  fixtureId     Int
  value         Float
  type          overUnder
  odd           Float
  user          User?        @relation(fields: [userId], references: [id])

  @@map("betsCorners")
}

enum overUnder {
  over
  under
}

enum homeAwayDraw{
  home
  away
  draw
}